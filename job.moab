#!/bin/bash
#MSUB -N veins_maat
#MSUB -j oe
#MSUB -o $(JOBID).$(JOBNAME)
#MSUB -m a
#MSUB -q singlenode
#MSUB -M 'rens.vanderheijden@uni-ulm.de'
#MSUB -l nodes=1:ppn=2
#MSUB -l mem=4000mb
#MSUB -l walltime=5:00:00
#
# NOTE: Param 1 MUST be Config and 2 must be the lower #RUN and 3 the veins directory
#
CONFIG=$1
L=$2
H=$L
VEINS_DIR=$3

module load compiler/gnu #make sure correct libstdc++.so.6 is loaded (hopefully....)

start=$(date +%s)
 
echo " "
echo "### Setting up shell environment ..."
echo " "
if test -e "/etc/profile"; then source "/etc/profile"; fi;
if test -e "$HOME/.bash_profile"; then source "$HOME/.bash_profile"; fi;
unset LANG; export LC_ALL="C"; export MKL_NUM_THREADS=1; export OMP_NUM_THREADS=1
export USER=${USER:=`logname`}
export SLURM_JOB_ID=${SLURM_JOB_ID:=`date +%s`}
export SLURM_SUBMIT_DIR=${SLURM_SUBMIT_DIR:=`pwd`}
export SLURM_JOB_NAME=${SLURM_JOB_NAME:=`basename "$0"`}
export SLURM_JOB_NAME=$(echo "${SLURM_JOB_NAME}" | sed 's/[^a-zA-Z0-9._-]/_/g')
 
echo " "
echo "### Printing basic job infos to stdout ..."
echo " "
echo "START_TIME           = `date +'%y-%m-%d %H:%M:%S %s'`"
echo "HOSTNAME             = ${HOSTNAME}"
echo "USER                 = ${USER}"
echo "SLURM_JOB_NAME       = ${SLURM_JOB_NAME}"
echo "SLURM_JOB_ID         = ${SLURM_JOB_ID}"
echo "SLURM_SUBMIT_DIR     = ${SLURM_SUBMIT_DIR}"
echo "SLURM_NTASKS         = ${SLURM_NTASKS}"
echo "SLURM_NODELIST       = ${SLURM_NODELIST}"
 
echo "Working Directory:                    $PWD"
echo "Running on host                       $HOSTNAME"
echo "Job id:                               $MOAB_JOBID"
echo "Job name:                             $MOAB_JOBNAME"
echo "Number of nodes allocated to job:     $MOAB_NODECOUNT"
echo "Number of cores allocated to job:     $MOAB_PROCCOUNT"
 
export SUMO_HOME="${HOME}/sumo/sumo-0.30.0"
export SUMO_BIN="${SUMO_HOME}/bin"
export OMNETPP_BIN="${HOME}/omnetpp/omnetpp-5.1.1/bin"
export PATH="${PATH}:${SUMO_BIN}:${OMNETPP_BIN}"
 
# Create Work Dir
 
echo " "
echo "### Creating JOB directory in WORKSPACE"
echo " "
JOB_WORK_DIR="${WORK}/${SLURM_JOB_NAME}.uc1.${SLURM_JOB_ID%%.*}.$(date +%y%m%d_%H%M%S)"

if [ -z ${JOB_WORK_DIR} ]; then echo "could not determine job working directory, using /tmp"; JOB_WORK_DIR="/tmp"; fi
 
echo "JOB_WORK_DIR = ${JOB_WORK_DIR}"
 
mkdir -vp "${JOB_WORK_DIR}"
cd "${JOB_WORK_DIR}"
 
cp -r "${VEINS_DIR}" "${JOB_WORK_DIR}"
export SIMULATION_DIR="${JOB_WORK_DIR}/veins-maat/simulations/securecomm2018"

echo "OMNET_BIN_DIR = $OMNETPP_BIN"

cd "${SIMULATION_DIR}"

echo ''
echo "##############################"
echo "# Starting runs ${L} to ${H} #"
echo "##############################"

for K in $(seq ${L} ${H}); do
# Execute opp_run with runnumber $RUN and config $CONFIG
 cp omnetpp.ini omnetpp_${K}.ini
 echo "./run -c "$CONFIG" -f omnetpp_${K}.ini -r "${K}" > RUN_${K}.txt"
 ./run -c "$CONFIG" -f omnetpp_${K}.ini -r "${K}" > RUN_${K}.txt
 sleep 1
done
 
if [ ! -d "${SIMULATION_DIR}/results" ]; then
 echo "No resultdir"
fi
 
let RUNS=$H-$L+1
RES_FILE_COUNT=$(ls "${SIMULATION_DIR}/results/" | grep .sca | wc -l)
if [ $RES_FILE_COUNT -lt $RUNS ]; then
 echo "Not all runs ran through"
fi

mv "${SIMULATION_DIR}/*.json" "${SIMULATION_DIR}/results/"
 
echo " "
echo "### Compressing results and copying back result archive ..."
echo " "
 
mkdir -vp "${SLURM_SUBMIT_DIR}" # if user has deleted or moved the submit dir
echo "Creating result tgz-file '${JOB_WORK_DIR}.tgz' ..."
tar --exclude "DUARoutes" --exclude "misc" --exclude "*.xml" -zcvf "${JOB_WORK_DIR}.tgz" "${SIMULATION_DIR}" \
  || { echo "ERROR: Failed to create tgz-file. Please cleanup JOB_WORK_DIR '$JOB_WORK_DIR' on host '$HOSTNAME' manually (if not done automatically by queueing system)."; exit 102; }
mkdir -p "${HOME}/veins-maat-output/"
mv "${JOB_WORK_DIR}.tgz" "${HOME}/veins-maat-output/"
 
echo " "
echo "### Final cleanup..."
echo " "
rm -rvf "${JOB_WORK_DIR}"
echo "END_TIME             = `date +'%y-%m-%d %H:%M:%S %s'`"
 
end=$(date +%s)
echo " "
echo "### Calculate duration ..."
echo " "
diff=$[end-start]
if [ $diff -lt 60 ]; then
   echo "Runtime (approx.): '$diff' secs"
elif [ $diff -ge 60 ]; then
   echo 'Runtime (approx.): '$[$diff / 60] 'min(s) '$[$diff % 60] 'secs'
fi
